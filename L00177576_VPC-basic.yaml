AWSTemplateFormatVersion: 2010-09-09

Description: This template create VPC for private and public subnets
  
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC CDIR"
        Parameters: 
          - VpcCIDR 
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters: 
          - PublicSubnet1CIDR
          - PrivateSubnet1CIDR
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation
  
Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: Please enter IP range for the VPC
    Type: String 
    
  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: Please enter IP range for the Public subnet1
    Type: String 

  PrivateSubnet1CIDR:
    Default: 10.0.2.0/24
    Description: Please enter IP range for the Private subnet1
    Type: String 
    
  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP range in the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: '18'
    MinLength: '9'
    Type: String
      
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: "L00177576 VPC"
         
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: "L00177576 IGW"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC   
      
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:  
      AvailabilityZone: !Select [0,!GetAZs '']
      CidrBlock: !Ref PublicSubnet1CIDR 
      MapPublicIpOnLaunch: true
      Tags: 
      - Key: Name
        Value: "L00177576 PublicSubnet1"
      VpcId: !Ref VPC 

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC 
      Tags:
      - Key: Name 
        Value: "L00177576 PublicRouteTable"
        
  PublicRoute:
    Type: AWS::EC2::Route 
    Properties:
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway 
       RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable 
      
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:  
      AvailabilityZone: !Select [0,!GetAZs '']
      CidrBlock: !Ref PrivateSubnet1CIDR 
      MapPublicIpOnLaunch: false
      Tags: 
      - Key: Name
        Value: "L00177576 PrivateSubnet1"
      VpcId: !Ref VPC 

  APPSecurityGroup:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupDescription: Enable HTTP/HTTPS access on port 80/443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags: 
      - Key: Name
        Value: "L00177576 APPSecurityGroup"
      VpcId: !Ref VPC

  #JumpBox
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup 
    Properties:
      GroupDescription: SSH Security group 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags: 
      - Key: Name
        Value: "L00177576 SSHSecurityGroup"
      VpcId: !Ref VPC


  EC2I455JL:
    Type: 'AWS::EC2::Instance'
    Properties:
      NetworkInterfaces:
        - SubnetId: !Ref PublicSubnet1

  EC2I54K3B:
    Type: 'AWS::EC2::Instance'
    Properties:
      NetworkInterfaces:
        - SubnetId: !Ref PrivateSubnet1

#Outputs: